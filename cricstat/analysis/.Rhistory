colMeans(subData)
colMeans(subset(mydata,Month==6),na.rm=TRUE)
x<-c(4,"a",TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
class(rbind(x,y))
x<-1:4
y<-2:3
x
y
x+y
mydata[1:1,]
tail(mydata)
mydata[47,1]
colMeans(mydata,na.rm=TRUE)
colMeans(subset(mydata,Month==6),na.rm=TRUE)
getwd()
setwd("apatti_ml/cricstat/analysis")
inputfilename <- "../data/ipl_bowler.csv"
rawData <- read.csv(inputfilename,header = TRUE)
require(ggplot2)
str(rawData)
rawData$innings <- as.factor(rawData$innings)
rawData$over <- as.factor(rawData$over)
rawData$year <- as.factor(rawData$year)
deathOversData <- rawData[rawData$over==17 |rawData$over==18 |rawData$over==19|rawData$over==20,c('matchid','year','innings','bowler','over','runs','wickets') ]
deathOvers2016 <- deathOversData[deathOversData$year==2016,]
deathOvers2015 <- deathOversData[deathOversData$year==2015,]
deathOvers2014 <- deathOversData[deathOversData$year==2014,]
library(data.table)
dt <- data.table(deathData2016)
dt[,sum(runs),by=bowler]
tables()
setkey(dt,over)
deathOversData <- rawData[rawData$over==17 |rawData$over==18 |rawData$over==19|rawData$over==20,c('matchid','year','innings','bowler','over','runs','wickets') ]
deathOvers2016 <- deathOversData[deathOversData$year==2016,]
deathOvers2015 <- deathOversData[deathOversData$year==2015,]
deathOvers2014 <- deathOversData[deathOversData$year==2014,]
library(data.table)
dt <- data.table(deathData2016)
dt <- data.table(deathOvers2016)
dt[,sum(runs),by=bowler]
tables()
setkey(dt,bowler,over,innings)
tables()
dt
dt[,lapply(.SD,sum),by=bowler]
dt[,sum(runs),by=bowler]
dt[,sum(runs),by=list(bowlers,overs)]
dt[,sum(runs),by=list(bowler,overs)]
dt[,sum(runs),by=list(bowler,over)]
dt[order(V1),sum(runs),by=list(bowler,over)]
dt[order(V1),Runs:=sum(runs),by=list(bowler,over)]
dt[,Runs:=sum(runs),by=list(bowler,over)]
dt[,sum(runs),by=list(bowler,over)]
dt[,Runs:=sum(runs),by=list(bowler,over)]
dt
dt[,sum(runs),by=list(bowler,over)]
dt[,Runs=sum(runs),by=list(bowler,over)]
dt[,sum(runs),by=list(bowler,over)]
dt[order($3),sum(runs),by=list(bowler,over)]
dt[order(3),sum(runs),by=list(bowler,over)]
dt[,sum(runs),by=list(bowler,over)]
dt[order(runs),sum(runs),by=list(bowler,over)]
dt[order(Runs),Runs:=sum(runs),by=list(bowler,over)]
dt
dt[,sum(runs),by=list(bowler,over)][order(V1)]
dt[,sum(runs),by=list(bowler,over)][order(bowler,-V1)]
dt[,sum(runs),by=list(bowler,over)][order(over,-V1)]
dt[,sum(runs),by=list(bowler,over)][order(bowler,over,-V1)]
dt[,sum(runs),by=list(bowler,over)][order(bowler,over)]
dt[,sum(runs),by=list(bowler,over)][order(over,bowler,-V1)]
dt[,sum(runs),by=list(bowler,over)][order(over,-V1)]
dt[,Runs:=sum(runs),by=list(bowler,over)][order(over,-V1)]
dt[,Runs:=sum(runs),by=list(bowler,over)][order(over,-Runs)]
dt[,{sum(runs)},by=list(bowler,over)][order(over,-V1)]
temp <- dt[,sum(runs),by=list(bowler,over)][order(over,-V1)]
plot.table(temp)
plot(temp)
plot(temp$over,temp$V1)
plot(temp$bowler,temp$V1)
mosaicplot(temp)
mosaicplot(temp,main="Bowler",xlab="over",ylab="V1")
mosaicplot(temp~over,V1,main="Bowler",xlab="over",ylab="V1")
mosaicplot(temp~over,main="Bowler",xlab="over",ylab="V1")
mosaicplot(temp$over,main="Bowler",xlab="over",ylab="V1")
plot(temp$bowler,temp$V1)
barplot(temp)
barplot(temp$bowler,temp$V1)
barplot(temp$V1)
barplot(temp$V1,temp$bowler)
barplot(temp$V1,temp$over)
qplot(data=temp,x=over,y=V1)
qplot(data=temp,x=over,y=V1) + facet_wrap("bowler")
qplot(data=temp,x=over,y=V1,geom="bar") + facet_wrap("bowler")
qplot(data=temp,x=over,y=V1,geom="bar",stat="identity") + facet_wrap("bowler")
melt(temp,value.name="V1",variable.name="over")
melt(temp,value.name="V1",variable.name="over",na.rm=TRUE)
temp
melt(temp,value.name="V1",na.rm=TRUE)
t <- melt(temp,value.name="V1",variable.name="over",na.rm=TRUE)
qplot(data=t,x=over,y=V1,geom="bar",stat="identity") + facet_wrap("bowler")
qplot(data=t,x=over,y=V1,geom="bar") + facet_wrap("bowler")
qplot(data=t,x=over,y=V1) + facet_wrap("bowler")
barplot(as.matrix(temp))
qplot(data=temp,x=over,y=V1) + facet_wrap("bowler")+geom_bar(stat="identity")
dt
dt[,sum(runs),by=bowler]
dt[,sum(runs),by='bowler']
head(dt)
dt[,sum(runs),by=list(bowler)]
dt[,sum(runs),by=list(bowler,over)][order(bowler,-V1)]
dt[,sum(runs),by=list(bowler,over)][order(bowler,-V1)]
inputfilename <- "../data/ipl_bowler.csv"
rawData <- read.csv(inputfilename,header = TRUE)
require(ggplot2)
str(rawData)
rawData$innings <- as.factor(rawData$innings)
rawData$over <- as.factor(rawData$over)
rawData$year <- as.factor(rawData$year)
deathOversData <- rawData[rawData$over==17 |rawData$over==18 |rawData$over==19|rawData$over==20,c('matchid','year','innings','bowler','over','runs','wickets') ]
deathOvers2016 <- deathOversData[deathOversData$year==2016,]
deathOvers2015 <- deathOversData[deathOversData$year==2015,]
deathOvers2014 <- deathOversData[deathOversData$year==2014,]
library(data.table)
dt <- data.table(deathOvers2016)
tables()
setkey(dt,bowler,over,innings)
dt[,sum(runs),by=list(bowler,over)][order(bowler,-V1)]
dt[,sum(runs),by=bowler]
dt[,count(overs),by=bowler]
dt[,levels(over),by=bowler]
dt[,levels(over)]
dt[,nlevels(over)]
dt[,nlevels(over),by=bowler]
dt[,by=bowler]
?.SD
.SD(dt)
dt[,.N,by=bowler]
dt[,SUM(runs)/.N,by=bowler]
dt[,sum(runs)/.N,by=bowler]
dt[,c(sum(runs)/.N,.N),by=bowler]
dt[,(sum(runs)/.N,.N),by=bowler]
dt[,:=(sum(runs)/.N,.N),by=bowler]
dt[,':='(sum(runs)/.N,.N),by=bowler]
dt[,c(sum(runs)/.N,count=.N),by=bowler]
dt[,c(lapply(sum(runs)/.N),count=.N),by=bowler]
dt[,c(lapply(sum),count=.N),by=bowler]
dt[,c(lapply(sum,runs),count=.N),by=bowler]
dt[,(sum(runs)/.N,.N),by=bowler]
dt[,c(sum(runs)/.N,.N),by=bowler]
dt[,cbind(sum(runs)/.N,.N),by=bowler]
dt[,rbind(sum(runs)/.N,.N),by=bowler]
dt[,(sum(runs)/.N,count=.N),by=bowler]
dt[,SUM(runs)/.N,by=bowler]
dt[,sum(runs)/.N,by=bowler]
dt[,lapply(.SD,sum),by=bowler]
dt[,lapply(.SD,sum,na.rm=TRUE),by=bowler]
dt[,lapply(.SD,sum,na.rm=TRUE),by=bowler,.SDcols=c("runs")]
dt[,lapply(.SD,sum,na.rm=TRUE),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(lapply(.SD,sum,na.rm=TRUE),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(sum(runs),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(sum(runs),COUNT=.N),by=bowler]
dt[,c(lapply(.SD,sum,na.rm=TRUE),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(lapply(.SD,mean,na.rm=TRUE),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(lapply(.SD,function(x) sum(x)/.N,na.rm=TRUE),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,c(lapply(.SD,function(x) sum(x)/.N),COUNT=.N),by=bowler,.SDcols=c("runs","wickets")]
dt[,list(sum(runs)/.N,sum(wickets),.N),by=bowler]
dt[,list(R=sum(runs)/.N,sum(wickets),.N),by=bowler]
qplot(data=eco_wickets,x=bowler,y=Runs)+geom_bar(stat="identity")
eco_wickets = dt[,list(Runs=sum(runs)/.N,Wickets=sum(wickets),.N),by=bowler]
qplot(data=eco_wickets,x=bowler,y=Runs)+geom_bar(stat="identity")
temp <- dt[,sum(runs),by=list(bowler,over)][order(over,-V1)]
qplot(data=temp,x=over,y=V1) + facet_wrap("bowler")+geom_bar(stat="identity")
qplot(data=eco_wickets,x=bowler,y=Runs)+geom_bar(stat="identity")
head(deathOvers2016,10)
deathOvers2016[,by=bowler]
deathOvers2016 <- deathOversData[deathOversData$year==2016,]
deathOvers2016[,by=bowler]
deathOvers2016[order(bowler)]
deathOvers2016[order(runs)]
deathOvers2016
deathOvers2016[bowler=="B Kumar",]
deathOvers2016$bowler
dt
dt[order(bowler)]
temp
dt[,list(Runs=sum(runs)/.N,Wickets=sum(wickets),.N),by=bowler]
dt[,list(Runs=sum(runs)/.N,Wickets=sum(wickets),.N),by=list(bowler,over)]
eco_wickets = dt[,list(Runs=sum(runs)/.N,Wickets=sum(wickets),.N),by=list(bowler,over)]
qplot(data=eco_wickets,x=over,y=Runs)+geom_bar(stat="identity"+facet_wrap("bowler"))
qplot(data=eco_wickets,x=over,y=Runs)+geom_bar(stat="identity")+facet_wrap("bowler"))
qplot(data=eco_wickets,x=over,y=Runs)+geom_bar(stat="identity")+facet_wrap("bowler")
head(eco_wickets,10)
eco_wickets[order(sum(Runs))]
eco_wickets = dt[,list(eco=sum(runs)/.N,Wickets=sum(wickets),.N),by=list(bowler,over)][order(eco)]
eco_wickets
qplot(data=eco_wickets,x=over,y=eco)+geom_bar(stat="identity")+facet_wrap("bowler")
eco_wickets
eco_wickets = dt[,list(eco=sum(runs)/.N,Wickets=sum(wickets),.N),by=list(bowler,over)][order(eco,-N)]
eco_wickets
eco_wickets = dt[,list(eco=sum(runs)/.N,Wickets=sum(wickets),.N),by=list(bowler,over)][order(-N,eco)]
eco_wickets
dt[,list(RUNS=sum(runs),wickets=sum(wickets)),by=bowler]
dt[,list(RUNS=sum(runs),wickets=sum(wickets)),by=bowler][order(RUNS)]
dt[,list(RUNS=sum(runs),wickets=sum(wickets),.N),by=bowler][order(RUNS)]
dt[,list(RUNS=sum(runs)/.N,wickets=sum(wickets),.N),by=bowler][order(RUNS)]
t<-dt[,list(RUNS=sum(runs)/.N,wickets=sum(wickets),.N),by=bowler][order(RUNS)]
plot.tablw
plot.table
library(gridExtra)
library(grid)
plot(t)
install.packages('gridExtra')
library(gridExtra)
library(grid)
grid.table(t)
overall <- dt[,list(RUNS=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(RUNS)]
library(grid)
library(gridExtra)
grid.table(overall)
grid.newpage()
grid.table(overall)
overall <- dt[,list(RUNS=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(RUNS)]
grid.table(overall)
grid.table(t)
dev.off()
grid.table(overall)
dev.off()
count(overall)
nrow(overall)
grid.table(overall[1:35])
dev.off()
grid.table(overall[1:20])
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(ECO,-wickets)]
dev.off()
grid.newpage()
grid.table(overall[1:20])
grid.table(overall[21:45])
dev.off()
grid.newpage()
grid.table(overall[1:20])
grid.newpage()
grid.table(overall[21:45])
grid.newpage()
grid.table(overall[46:70])
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N,S=[1..N]),by=bowler][order(ECO,-wickets)]
?data.table
?grid.table
tableGrob(overall)
test <- tableGrob(overall)
grid.draw(test)
grid.newpage()
grid.draw(test)
grid.newpage()
grid.table(overall[1:20,])
grid.newpage()
grid.table(overall[21:45,])
grid.newpage()
grid.table(overall[1:20,],show.rownames=FALSE)
test <- tableGrop(overall,rows=seq_len(nrow(overall)))
test <- tableGrob(overall,rows=seq_len(nrow(overall)))
test
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(tg)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(tg$heights, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) tg[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(tg$heights, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(overall$bowler, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(overall$bowler, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
fullheight <- convertHeight(sum(tg$heights), "cm", valueOnly = TRUE)
fullheight <- convertHeight(sum(overall$bowler), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(overall$bowler, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(overall$bowler), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
fullheight <- convertHeight(sum(overall$bowler), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(overall$bowler, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(overall$ECO), "cm", valueOnly = TRUE)
margin <- unit(0.51,"in")
margin_cm <- convertHeight(margin, "cm", valueOnly = TRUE)
a4height <- 29.7 - margin_cm
nrows <- nrow(overall)
npages <- ceiling(fullheight / a4height)
heights <- convertHeight(overall$ECO, "cm", valueOnly = TRUE)
rows <- cut(cumsum(heights), include.lowest = FALSE,
breaks = c(0, cumsum(rep(a4height, npages))))
groups <- split(seq_len(nrows), rows)
gl <- lapply(groups, function(id) overall[id,])
pdf("multipage.pdf", paper = "a4", width = 0, height = 0)
for(page in seq_len(npages)){
grid.newpage()
grid.rect(width=unit(21,"cm") - margin,
height=unit(29.7,"cm")- margin)
grid.draw(gl[[page]])
}
## alternative to explicit loop:
## print(marrangeGrob(grobs=gl, ncol=1, nrow=1, top=NULL))
dev.off()
fullheight <- convertHeight(sum(overall$ECO), "cm", valueOnly = TRUE)
seq_len(overall)
seq_len(nrow)
seq_len(nrows)
nrows
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N,seq_len(nrow)),by=bowler][order(ECO,-wickets)]
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N,seq_len(nrows)),by=bowler][order(ECO,-wickets)]
overall
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(ECO,-wickets)]
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N,1:nrow(overall)),by=bowler][order(ECO,-wickets)]
overall
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(ECO,-wickets)]
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N,id:=1:.N),by=bowler][order(ECO,-wickets)]
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(ECO,-wickets)]
overall <- overall[,1:nrows]
overall
overall[rank] <- overall[,1:nrows]
overall[rank,] <- seq(1:nrows)
overall[rank] <- seq(1:nrows)
overall[rank] <- 1:nrow(overall)
seq(1:nrow(overall))
nrow(overall)
nrow(overalls)
overall <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=bowler][order(ECO,-wickets)]
overall[rank] <- 1:nrow(overall)
nrow(overall)
seq(1:nrow(overall))
overall$rank <- 1:nrow(overall)
overall
setcolorder(overall,c("rank","bowler","Num_Overs","ECO","wickets"))
library(grid)
library(gridExtra)
dev.off()
grid.newpage()
grid.table(overall[1:20,],show.rownames=FALSE)
grid.table(overall[1:20,])
grid.newpage()
grid.table(overall[21:45,])
grid.newpage()
grid.table(overall[46:70,])
fig1 <- tableGrob(overall[1:20,])
ggsave(file="ranking1_20.png",fig1)
p1<-grid.table(overall[1:20,])
grid.newpage()
p2<-grid.table(overall[21:45,])
grid.newpage()
p3<-grid.table(overall[46:70,])
grid.arrange(p1, p2, p3, nrow=3) #arranges plots within grid
grid.newpage()
grid.table(overall[1:20,])
grid.newpage()
grid.table(overall[21:45,])
grid.newpage()
grid.table(overall[46:70,])
head(overalll)
head(overall)
overall[Num_Overs>9]
overall[Num_Overs>8]
filteredData <- overall[Num_Overs>8]
filteredData$rank <- 1:nrow(filteredData)
filteredData
grid.newpage()
grid.table(filteredData)
innings <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
innnings
innings
innings <- innings[Num_Overs>8]
innings
innings <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
innings
innings[bowler=='CH Morris']
innings[innings==2]
inningsData <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
inningsData <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
inningsData[innings==2]
inningsData[innings=="2"]
inningsData[order(Bowler)]
inningsData[order(bowler)]
inningsData
inningsData <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
inningsData <- inningsData[Num_Overs>5]
inningsData
qplot(data=inningsData,x=innings,y=ECO)+geom_bar(stat="identity")+facet_wrap("bowler")
inningsData <- dt[,list(ECO=sum(runs)/.N,wickets=sum(wickets),Num_Overs=.N),by=list(bowler,innings)][order(ECO,-wickets)]
qplot(data=inningsData,x=innings,y=ECO)+geom_bar(stat="identity")+facet_wrap("bowler")
inningsData <- inningsData[Num_Overs>4]
qplot(data=inningsData,x=innings,y=ECO)+geom_bar(stat="identity")+facet_wrap("bowler")
qplot(data=inningsData,x=innings,y=c(ECO,Num_Overs)+geom_bar(stat="identity")+facet_wrap("bowler")
)
qplot(data=inningsData,x=innings,y=c(ECO,Num_Overs))+geom_bar(stat="identity")+facet_wrap("bowler")
qplot(data=inningsData,x=innings,y=ECO)+geom_bar(stat="identity")+facet_wrap("bowler")+ ggtitle("Death Overs performace\n(Minimum 5 overs)")
qplot(data=inningsData,x=innings,y=ECO)+geom_bar(stat="identity")+facet_wrap("bowler")+ ggtitle("Death Overs performace per innigs\n(Minimum 5 overs)")
